#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_fslash {
            bindings = <&div_mul>;
            key-positions = <17 27>;
        };

        combo_bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <29 17>;
        };

        r_brack {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 12>;
        };

        r_brack_l {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        a_brack {
            bindings = <&angle_less>;
            key-positions = <24 23>;
        };

        a_brack_l {
            bindings = <&angle_great>;
            key-positions = <27 28>;
        };

        c_brack {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 3>;
        };

        c_brack_l {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <6 7>;
        };

        equality {
            bindings = <&equal_not>;
            key-positions = <7 8>;
        };

        combo_minus {
            bindings = <&minus_plus>;
            key-positions = <17 18>;
        };

        combo_underscore {
            bindings = <&under_super>;
            key-positions = <28 29>;
        };

        combo_at {
            bindings = <&at_percent>;
            key-positions = <12 11>;
        };

        combo_and {
            bindings = <&and_or>;
            key-positions = <1 2>;
        };

        combo_hash {
            bindings = <&hash_dollar>;
            key-positions = <22 23>;
        };

        grave_tidle {
            bindings = <&kp GRAVE>;
            key-positions = <12 24>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ques_exclaim: ques_exclaim {
            compatible = "zmk,behavior-mod-morph";
            label = "QUES_EXCLAIM";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        double_quote_single: double_quote_single {
            compatible = "zmk,behavior-mod-morph";
            label = "DOUBLE_QUOTE_SINGLE";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caps_shift: caps_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;
        };

        div_mul: div_mul {
            compatible = "zmk,behavior-mod-morph";
            label = "DIV_MUL";
            bindings = <&kp SLASH>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angle_less: angle_less {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_LESS";
            bindings = <&kp LESS_THAN>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angle_great: angle_great {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_GREAT";
            bindings = <&kp GREATER_THAN>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_not: equal_not {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_NOT";
            bindings = <&kp EQUAL>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        under_super: under_super {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_SUPER";
            bindings = <&kp UNDERSCORE>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_percent: at_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_PERCENT";
            bindings = <&kp AT>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        and_or: and_or {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_OR";
            bindings = <&kp AMPERSAND>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash_dollar: hash_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_DOLLAR";
            bindings = <&kp HASH>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <230>;
            flavor = "balanced";
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 20 21 22 23 24 25 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃   BSPC    ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &kp W  &kp L                 &kp Y                 &kp P                     &kp B        &kp Z        &kp F                       &kp O                   &kp U                   &double_quote_single
              &kp C  &hrm_left LEFT_ALT R  &hrm_left LEFT_GUI S  &hrm_left LEFT_CONTROL T  &kp G        &kp M        &hrm_right RIGHT_CONTROL N  &hrm_right RIGHT_GUI E  &hrm_right RIGHT_ALT I  &kp A
&lt 3 DELETE  &kp Q  &kp J                 &kp V                 &kp D                     &kp K        &kp X        &kp H                       &comma_semi             &dot_colon              &ques_exclaim         &lt 3 INS
                                           &kp ESCAPE            &hold_tap 2 SPACE         &lt 0 TAB    &caps_shift  &hold_tap 1 BACKSPACE       &kp ENTER
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        NAV {
            bindings = <
        &kp LC(X)       &kp LC(U)     &kp LC(D)       &kp LC(P)        &trans    &trans  &trans             &trans         &trans         &trans
        &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans    &trans  &sk RIGHT_CONTROL  &sk RIGHT_GUI  &sk RIGHT_ALT  &sk RIGHT_SHIFT
&trans  &kp LC(A)       &kp PAGE_UP   &kp PAGE_DOWN   &kp LC(N)        &trans    &trans  &trans             &trans         &trans         &trans           &trans
                                      &trans          &trans           &trans    &trans  &trans             &trans
            >;
        };

        NUM {
            bindings = <
        &trans          &trans        &trans        &trans            &trans    &trans  &kp N7        &kp N8        &kp N9        &trans
        &sk LEFT_SHIFT  &sk LEFT_ALT  &sk LEFT_GUI  &sk LEFT_CONTROL  &trans    &kp N0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans
&trans  &trans          &trans        &trans        &trans            &trans    &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                                      &trans        &trans            &trans    &trans  &trans        &trans
            >;
        };

        SYS {
            bindings = <
        &kp DEL         &kp END         &kp HOME         &kp INSERT        &bt BT_SEL 0    &trans   &kp F7  &kp F8  &kp F9  &kp F13
        &sk LEFT_SHIFT  &sk LEFT_ALT    &sk LEFT_GUI     &sk LEFT_CONTROL  &bt BT_SEL 1    &kp F10  &kp F4  &kp F5  &kp F6  &kp F12
&trans  &kp KP_NUMLOCK  &bt BT_CLR_ALL  &kp PAUSE_BREAK  &kp PRINTSCREEN   &bt BT_SEL 2    &trans   &kp F1  &kp F2  &kp F3  &kp F11  &trans
                                        &trans           &trans            &trans          &trans   &trans  &trans
            >;
        };
    };
};
